-- CHAPTER 1 --
A value is immutable, when you reassign to another variable it basically copies it. When you change a property it recreates a new value type (like 1 + 2 = 3). (this is deep copied)
Types that perform deep copies are said to have value semantics.

When a struct with reference types get copied over, the references itself gets copied (so changing it in the other variable changes the original). This is said to be shallow copies.

Functions that take other functions as arguments are referred to as higher-order functions.

Functions that aren't methods are called free functions.

Free functions and methods called on structs are said to be statically dispatched, the function is known at compile time. (called dynamically dispatched on classes/protocols)

-- CHAPTER 2 --
The definition of map just appends while flatMap appends(contentsOf:) which would adds the total by one dimension.

ArraySlice is a view on arrays. Itâ€™s backed by the original array, yet it provides a view on just the slice. The ArraySlice type has the same methods defined as Array does (because both conform to the same protocols, most importantly Collection).

If you mutate an object after using it as a dictionary key in a way that changes its hash value and/or equality, you won't be able to effectively corrupting its internal storage. This isn't a problem with value types because the key in the dictionary doesn't share your copy's storage and thefore can't be mutated from the outside.

Sets: you can subtract set items, find elements that are in both, and combine them remove duplicates.

IndexSet represents a set of positive integer values and is more effienct than Set<Int> becayse it uses a list of ranges internally. So a selection of the first 500 rows in the table only takes two integers to store (the selection's lower and upper bounds).

Unlike IndexSet, CharacterSet isn't a collection. CharacterSet isn't compatible with Swift's Character type.

CountableRange is a type alias for ranges with strideable element types, CountablePartialRange is a type alias for PartialRangeFrom. These used to be part of the standard library until Swift 4.1 and 4.2

-- CHAPTER 3 -- Optionals

Optional chaining is a "flattening operation". String?.uppercased() returns an optional but String?.uppercased().lowercased() does not require optional chaining after uppercased. The optionality is already captured.

Mapping over an optional collection can produce a double optional if the transformation function also has an optional result. This can be resolved by using flatMap. If it's a sequence then use compactMap.You can't use compactMap on single values, but you can with flatMap.

The '==' operator comparing two values whether optionals or not will work becuase Swift does the handling for you.

When you have a non-optional value, Swift will always be willing to promote it to an optional value in order to make the types match. For example you'd have to write myDict["someKey"] = Optional(someValue) to assign a value to a dictionary. 

Assigning nil to a dictionary key will remove the key.

To actually assign it nil, the following work:
dictWithNils["two"] = Optional(nil)
dictWithNils["two"] = .some(nil)
dictWithNils["two"]? = nil

The first reason implicitly unwrapped optionals exist is to make interoperability with ObjC and C easier. Theres no way to indicate that a reference was nullable in objc and c. The second reason is two-phase initialization of Cocoa. View Controllers are created lazily, so there exists a time window - after a view controller has been initialized but before it has loaded its view - when the view objects its outlets reference have notyet been created.

You can still use optional unwrapped techniques on implicity (!) unwrapped optionals.

-- CHAPTER 4 -- Functions

Functions are reffered to as "first-class objects" - you can assign functions to variables and pass in and out of other functions.

Swift only allows argument labels in function declarations; the labels aren't included in a function's type. You can't assign argument labels to a variable of a function type.

When a function references variables outside its scope, those variables are captured and stick around after they would otherwise fall out of scope and be destroyed.

Technically in programming terminology, a combination of a function and an environment of captured variables is called a closure.

page 100 starts implementing a complex objc style sort descriptor. (NSSortDescriptor).

Key-value coding looks up the value of a key at runtime. The selector parameter takes a selector which is a string describing a method name. At runtime, the selector is used to look up a comparison function, and when comparing two objects, the values for the key are compared using that comparison function.

inout parameters are NOT pass-by-reference, they are pass-by-value-and-copy-back. They are modified by the function, passed out of the function to replace the original value.

If a function takes an UnsafeMutablePointer as a parameter, then you can pass a var into it using &m similar to inout, but you REALLY are passing by reference.

You can't mutate a variable through a typecast ( x as? Int = 2 )

A key-path is an uninvoked reference to a property. More info can be found here: https://www.swiftbysundell.com/articles/the-power-of-key-paths-in-swift/

Writable key paths are good for data binding. When you bing two porperties together, property one change will affect property two. This is because you aren't assigning things to variables, you are assigning things to key paths. The Key-Value observing mechanism in Coca does this.
